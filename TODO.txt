- Atualização da outra sessão no mesmo usuário encaminha os pacotes diretamente pra outra sessão no ato de client -> upload
- Ou 2 ou 4 threads por usuário (2 sessões, 2 threads por sessão (1 cmd/sync_dir, 1 relay (arquivos)))
- Cada cliente 2 threads
- Warning de return function reaches end without returning
- Server se mata depois que cliente sai 

Cliente: Thread 1 (atual) (socket de comandos e dados - SCD) - Já funcionando
         Thread 2 (mudanças do servidor) (socket de dados - SD)

Servidor:   X Thread que espera conexões (main)
            - Conexão ocorre:
                Thread receber dados e comandos do client (já existe - server loop padrão) (sessão 1)
                    (encaminha pra SOCKET DE DADOS (SD)  sessão 2)
                    (comunica com a socket de comandos - SCD sessão 1)
                Thread receber dados e comandos do client (já existe - server loop padrão) (sessão 2)
                    (encaminha pra SOCKET DE DADOS (SD)  sessão 1)
                    (comunica com a socket de comandos - SCD sessão 2)
        Sistema de limite de sessão ( 2 por cliente )
        Sistema de comunicação quando uma sessão nova do cliente for criada ou deletada (avisar a outra sessão)

Sockets:
- [x] Conexão 
- [x] SCD
- [ ] SD
- [X] Limite de conexões

No server_loop_data,
    - Para encaminhar o arquivo para a outra session,
        - [X] Tem que atualizar o nome do diretório 
        - [X] Esperar o arquivo ser escrito antes de enviar o send
No server_loop_command
    - Enviar Upload e Delete para o UserServer

No Client:
    - Criar pthread para dar reply em uploads vindos do server, duplicar sockets, handleshake

- Adicionais:
    - Ping
    

- Testar em 2 PCs 
- Fazer rotina de testes do professor
- Fazer com que ao encaminhar arquivos, mande pra todas as sockets, já que não tem via pra enviar errado e tem o sistema de hash.

------------------------------------------------------------------------------------------------------

Dia 2:

Quando se dá um Upload, o arquivo não é colocado na pasta sync_dir do client.
A persistência de dados é meio ambígua. 

Com 1 usuário/conexão só:
[X] Upload
[X] Download
[X] Delete
[X] sync_dir

Com 2 usuários diferentes, cada um com uma única conexão:
[X] Upload
[X] Download
[X] Delete
[X] sync_dir

Com 1 usuário com 2 conexões:
[X] Upload
[X] Download
[X] Delete
[X] sync_dir

Com 1 usuário com 2 conexões, em dois computadores diferentes:
[] Upload
[] Download
[] Delete
[] sync_dir

Com 1 usuário com 2 conexões, em dois computadores diferentes:
[] Upload
[] Download
[] Delete
[] sync_dir


Arrumar Exit Thread Data 